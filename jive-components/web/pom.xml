<!--
    The web pom is where we build a new custom war (overlay and custom files are copied into your WEB-INF/classes of the war)
    and run and test things via Cargo.  Running package here will not trigger a re-build of any plugins referenced in your parent
    pom.  However, the pluginDirs mojo will detect any sibling plugins and supply them to Cargo, so that all your project's plugins
    will be run.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <name>weboverlay</name>
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.alfresco.integration.jivetoolkit.jive.war</groupId>
    <artifactId>alfresco-connector-overlay</artifactId>
    <packaging>war</packaging>
    <version>1.1.0</version>
    <description>
       Custom Jive Engage WAR. We try to only place files in this project that MUST be overlayed.
       Usually this means there is no way to make the change as a plugin.  Most customizations can be done by plugin these days, and there
       are many advantages to doing so in terms of packaging, deployment, upgradability and debugging. 
       Overlaying a file ensures that you will have to put forth at least some development effort when you want to upgrade versions
       of Jive.  
    </description>

    <parent>
        <groupId>org.alfresco.integration.jivetoolkit</groupId>
        <artifactId>alfresco</artifactId>
        <version>1.1.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>


    <build>
        <finalName>
            ${customer.name}-${customer.version}-jive-${jive.version}
        </finalName>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources-filtered</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>1.6</source>    <!-- compiling with JDK 6 now -->
                    <target>1.6</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId> org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>1.6</version>
                <executions>
		            <!-- If you are making use of the Cobertura reports, they generate a .ser file that must be deleted, or your
			             coverage data will be corrupted on successive runs
		            -->
                    <execution>
                        <id>delete-cobertura-ser</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
                                <echo message="deleting cobertura.ser" />
                                <delete file="${basedir}/cobertura.ser" failonerror="false"/>
                            </tasks>
                        </configuration>
                    </execution>
                    <execution>
                        <id>compile-jive-artifacts</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
			    				<!-- Define required version properties as ant filter tokens -->
			    				<filter token="build.number" value="${build.number}" />
	                           	<filter token="build.vcs.number" value="${build.vcs.number}" />
	                           	<filter token="build.project.name" value="${build.project.name}" />
	                           	
	                           	<!-- Define ant-contrib tasks so that the for task is available -->
                            	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.compile.classpath"/>
                            
			                    <!-- Copy themes files into ../target/jiveHome/themes for testing  -->
                                <copy todir="${basedir}/../target/jiveHome/themes" overwrite="true">
                                    <fileset dir="${basedir}/src/main/themes">
                                        <include name="**/*" />
                                    </fileset>
                                </copy>
                                <!-- Copy filtered version file into each theme sub directory -->
                                <for param="themeDir">
                                	<path><dirset dir="${basedir}/../target/jiveHome/themes" includes="*" /></path>
                                	<sequential>
                                		<copy todir="@{themeDir}" overwrite="yes" filtering="on">
		                                    <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*" />
                                		</copy>
                                	</sequential>
                                </for>                                
				                
				                <!-- Now build a new themes.zip for distribution -->
                                <mkdir dir="${project.build.directory}/themes"/>
                                <copy todir="${project.build.directory}/themes" overwrite="yes" filtering="off">
                                    <fileset dir="${basedir}/src/main/themes"
                                             includes="**/*" excludes="**/.svn, **/.svn/**" />
                                </copy>
                                <!-- Copy filtered version file into each theme sub directory -->
                                <for param="themeDir">
                                	<path><dirset dir="${project.build.directory}/themes" includes="*" /></path>
                                	<sequential>
                                		<copy todir="@{themeDir}" overwrite="yes" filtering="on">
		                                    <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*" />
                                		</copy>
                                	</sequential>
                                </for>                                
                                <zip destfile="${project.build.directory}/themes.zip">
                                    <zipfileset dir="${project.build.directory}/themes" prefix=""/>
                                </zip>
				                
				                <!-- Copy your etc directory to ../target/jiveHome for testing-->
                                <mkdir dir="../target/jiveHome/etc"/>
                                <copy todir="../target/jiveHome/etc" overwrite="true">
                                    <fileset dir="src/main/etc">
                                        <include name="*.xml"/>
                                    </fileset>
                                </copy>
                                <!-- Copy filtered version file into etc sub directory -->
                                <copy todir="../target/jiveHome/etc" overwrite="true" filtering="on">
                                    <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*" />
                                </copy>
				                
				                <!-- Build an etc.zip for distribution-->
				                <!-- Built from target to include filtered version file -->
                                <zip destfile="${project.build.directory}/etc.zip">
                                    <zipfileset dir="../target/jiveHome/etc" prefix=""/>
                                </zip>

				                <!-- Copy your keys directory to ../target/jiveHome for testing-->
                                <mkdir dir="../target/jiveHome/keys"/>
                                <copy todir="../target/jiveHome/keys" overwrite="true">
                                    <fileset dir="${basedir}/src/main/keys">
                                        <include name="*.der"/>
                                    </fileset>
                                </copy>
                                <!-- Copy filtered version file into keys sub directory -->
                                <copy todir="../target/jiveHome/keys" overwrite="true" filtering="on">
                                    <fileset dir="${basedir}/src/main/resources-filtered/ant" includes="*" />
                                </copy>                                
				                
				                <!-- Build an keys.zip for distribution-->
				                <!-- Built from target to include filtered version file -->
                                <zip destfile="${project.build.directory}/keys.zip">
                                    <zipfileset dir="../target/jiveHome/keys" prefix=""/>
                                </zip>


                    
                            </tasks>
                        </configuration>
                    </execution>
                    <!-- packaging all web overlay class as custom-overlay.jar as plugin modules references  -->
                    <execution>
                        <id>package-web-overlay-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>			
                                <jar destfile="./target/custom-overlay.jar">
                                    <fileset dir="./target/classes"/>
                                </jar>
                            </tasks>
                        </configuration>
                    </execution>
                <!-- The execution below should be used when a project needs to overlay any Jive bean.properties
                     or resources in the Jive Engage directory "resources.scripts".  In order for these overlay files
                     to actually override their equivalents in the Jive Engage jar, they need to be placed in the
                     Jive jar itself. -->                     
                    <execution>
                        <id>repackage-jive-jar</id>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <tasks>
				 				<!-- Overlay items in the overlay directory into the jar distributed in the war -->
                                <unjar src="./target/${build.finalName}/WEB-INF/lib/${jive.core.jar}-${jive.shortversion}.jar"
                                        dest="./target/${jive.core.jar}-temp-${jive.shortversion}" />
                                <copy todir="./target/${jive.core.jar}-temp-${jive.shortversion}" overwrite="true">
                                    <fileset dir="./src/main/overlay/" includes="**/*"/>
                                </copy>
                                
                                <copy todir="./target/${jive.core.jar}-temp-${jive.shortversion}-yui" overwrite="true">
                                    <fileset dir="./src/main/overlay/" includes="**/*"/>
                                </copy>
                                
                                <touch>
                                    <fileset dir="./target/${jive.core.jar}-temp-${jive.shortversion}-yui"/>
                                </touch>
                               
                                <taskdef name="yui-compressor"
                                         classname="net.noha.tools.ant.yuicompressor.tasks.YuiCompressorTask"
                                         classpathref="maven.dependency.classpath"/>

                                <yui-compressor
                                    warn="false"
                                    munge="true"
                                    preserveallsemicolons="false"
                                    todir="./target/${jive.core.jar}-temp-${jive.shortversion}"
                                    fromdir="./target/${jive.core.jar}-temp-${jive.shortversion}-yui"
                                    charset="utf8">
                                </yui-compressor>
                                <jar jarfile="./target/${build.finalName}/WEB-INF/lib/${jive.core.jar}-${jive.shortversion}.jar" update="false">
                                    <fileset dir="./target/${jive.core.jar}-temp-${jive.shortversion}" includes="**/*"/>
                                </jar>
                                <jar destfile="./target/${build.finalName}.war">
                                    <fileset dir="./target/${build.finalName}"/>
                                </jar>
                            </tasks>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
	        <!-- Surefire is our unit testing framework of choice-->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.6</version>
                <configuration>
		            <!-- Don't suck up selenium tests in there-->
                    <excludes>
                        <exclude>**/selenium/*Test.java</exclude>
                    </excludes>
                    <argLine>-Xms128m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=1024m</argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.1.1</version>
                <configuration>
                    <workingDirectory>${basedir}/target/tmp</workingDirectory>
                </configuration>
            </plugin>
			<plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <version>1.3</version>
                <dependencies>
                    <dependency>
                        <groupId>org.aspectj</groupId>
                        <artifactId>aspectjtools</artifactId>
                        <version>1.6.9</version>
                    </dependency>
                </dependencies>                
                <configuration>
                    <aspectLibraries>
                        <aspectLibrary>
                            <groupId>org.springframework</groupId>
                            <artifactId>spring-aspects</artifactId>
                        </aspectLibrary>
                    </aspectLibraries>
                    <source>1.6</source>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin> 
        </plugins>
    </build>
    <!-- These properties are set by a TeamCity CI server.  They get populated into the customer_version.jsp that
         is copied into our war file at the root.  This gives you web-accessible, definitive build information -->
    <properties>
        <build.number>${env.BUILD_NUMBER}</build.number>
        <build.project.name>${env.TEAMCITY_PROJECT_NAME}</build.project.name>
        <!-- Alfresco buildnumber -->
    </properties>
    <dependencies>
    	<dependency>
		  	<groupId>com.jivesoftware</groupId>
		  	<artifactId>jive</artifactId>     <!-- was jive-sbs-employee -->
		  	<version>${jive.version}</version>
		  	<type>war</type>
		</dependency>
		
		<dependency>
		  	<groupId>com.jivesoftware</groupId>
		  	<artifactId>jive</artifactId>     <!-- was jive-sbs-employee -->
		  	<version>${jive.version}</version>
		  	<type>jar</type>
		  	<scope>provided</scope>
		</dependency>
		
		<dependency>
		  	<groupId>com.jivesoftware</groupId>
		  	<artifactId>jive-lib</artifactId> <!-- was sbs-employee-all -->
		  	<version>${jive.version}</version>
		  	<type>pom</type>
		  	<scope>provided</scope>
		</dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.4</version>
            <scope>compile</scope>
        </dependency>
        
    <!-- Dependencies needed for ant for task, used to add version info to themes, key, etc. -->
		<dependency>
			<groupId>ant-contrib</groupId>
			<artifactId>ant-contrib</artifactId>
			<version>1.0b3</version>
			<exclusions>
				<exclusion>
					<groupId>ant</groupId>
					<artifactId>ant</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>ant</groupId>
			<artifactId>ant-nodeps</artifactId>
			<version>1.6.5</version>
		</dependency> 
        
	<!-- We assume your jdbc jars will be provided at runtime-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.5</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>8.3-603.jdbc3</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.openqa.selenium.client-drivers</groupId>
            <artifactId>selenium-java-client-driver</artifactId>
            <version>0.9.2</version>
            <scope>test</scope>
        </dependency>
        <!-- The dependencies below should be used when a project needs to overlay any resources in the Jive Engage
             directory "resources.scripts".  In order for the minimized Javascript files to be generated, these
             dependencies must be present so the yui-compressor task can run -->
		<dependency>
			<groupId>com.jivesoftware</groupId>
			<artifactId>yuicompressor</artifactId>
			<version>2.2.4_2_0_0_rc1</version>
		</dependency>
		<dependency>
			<groupId>com.jivesoftware</groupId>
			<artifactId>yuicompressor-anttask</artifactId>
			<version>2.4.2</version>
		</dependency>
		
		<!-- Alfresco specific dependencies -->
		<!-- 
		<dependency>
			<groupId>org.apache.chemistry.opencmis</groupId>
			<artifactId>chemistry-opencmis-client-impl</artifactId>
			<version>0.3.0</version>
		</dependency>

  		<dependency>
      		<groupId>org.alfresco.cmis.client</groupId>
      		<artifactId>alfresco-opencmis-extension</artifactId>
      		<version>0.2</version>      
    	</dependency>		
        <dependency>
			<groupId>org.alfresco.jivetoolkit</groupId>
			<artifactId>alfresco-jivetoolkit-encryption</artifactId>
			<version>1.1.0-SNAPSHOT</version>
		</dependency>
		
		<dependency>
			<groupId>org.alfresco.jivetoolkit</groupId>
			<artifactId>alfresco-jivetoolkit-opencmisauth</artifactId>
			<version>1.1.0-SNAPSHOT</version>
		</dependency>
		
		 -->
		 
    </dependencies>
    <profiles>
        <profile>
            <id>int</id>
            <build>
                <plugins>
				    <!-- Cargo is our main method of running and testing/debugging Jive.  This is the main configuration area. -->
				    <!-- Here is the config reference:  http://cargo.codehaus.org/Maven2+Plugin+Reference+Guide    -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <version>1.0.5</version>
                        <configuration>
			                <!-- Feed them this value; Decides if Cargo should wait after the container is started or not -->
                            <wait>${cargo.wait}</wait>
                            <container>
                                <containerId>tomcat6x</containerId>
                                <home>${tomcat6.home}</home>
                                <timeout>180000</timeout>
								<systemProperties>
									<jive.instance.home>${basedir}/../target/jiveHome</jive.instance.home>
                                    <jive.ws.disabled>false</jive.ws.disabled>
                                    <jive.devMode>true</jive.devMode>
                                    <themes.directory>${themeDir}</themes.directory>                                    
                                    <pluginDirs>${basedir}/../alfresco-connector/target/alfresco-jivetoolkit-jive-0.3</pluginDirs>                                                                         
                                </systemProperties>
                                <dependencies>
				                    <!-- Throw in our most common jdbc connectors; add yours here if it's missing -->
                                    <dependency>
                                        <groupId>mysql</groupId>
                                        <artifactId>mysql-connector-java</artifactId>
                                        <type>jar</type>
                                    </dependency>
                                    <dependency>
                                        <groupId>postgresql</groupId>
                                        <artifactId>postgresql</artifactId>
                                    </dependency>
                                </dependencies>
                            </container>
                            <configuration>
                                <home>target/tomcat6x</home>
                                <properties>
                                    <cargo.jvmargs>-Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n -Xms512m -Xmx1024m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</cargo.jvmargs>
                                </properties>
                                <deployables>
                                    <deployable>
                                        <location>target/${customer.name}-${customer.version}-jive-${jive.version}.war</location>
                                        <pingURL>http://localhost:8080/jive</pingURL>
                                        <properties>
                                            <context></context>
                                        </properties>
                                    </deployable>
                                </deployables>
                            </configuration>
                        </configuration>
                        <executions>
                            <execution>
                                <id>start-container</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop-container</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
				    <!-- Selenium Server Plugin
					     http://mojo.codehaus.org/selenium-maven-plugin/usage.html-->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>selenium-maven-plugin</artifactId>
                        <version>2.0</version>
                        <executions>
                            <execution>
                                <id>start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start-server</goal>
                                </goals>
                                <configuration>
                                    <background>true</background>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop-server</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
		            <!-- Surefire plugin for unit testing:
			             http://maven.apache.org/plugins/maven-surefire-plugin/usage.html-->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.6</version>
                        <executions>
                            <execution>
                                <id>surefire-it</id>
                                <phase>integration-test</phase>
                                <goals>
                                    <goal>test</goal>
                                </goals>
                                <configuration>
                                    <excludes>
                                        <exclude>none</exclude>
                                    </excludes>
                                    <includes>
                                        <include>**/selenium/*Test.java</include>
                                    </includes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>

            </build>
        </profile>

    <!-- This profile creates a cargo configuration that runs Tomcat with the exploded war. Running with the exploded war reduces
         the time that it takes for cargo to startup Tomcat. -->
        <profile>
            <id>dev</id>
            <build>
                <plugins>
		            <!-- Cargo is our main method of running and testing/debugging Jive.  This is the main configuration area. -->
		            <!-- Here is the config reference:  http://cargo.codehaus.org/Maven2+Plugin+Reference+Guide    -->
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <version>1.0.5</version>
                        <configuration>
                            <!-- In the dev profile, cargo will always wait -->
                            <wait>true</wait>
                            <container>
                                <containerId>tomcat6x</containerId>
                                <home>${tomcat6.home}</home>
                                <timeout>180000</timeout>
                                <systemProperties>
                                    <jive.instance.home>${basedir}/../target/jiveHome</jive.instance.home>
                                    <jive.ws.disabled>false</jive.ws.disabled>
                                    <jive.devMode>true</jive.devMode>
                                    <themes.directory>${basedir}/src/main/themes</themes.directory>
                                    <docverse.enabled>false</docverse.enabled>
                                    <rebel.struts2-plugin>true</rebel.struts2-plugin>
                                    <!-- <pluginDirs>${basedir}/../myplugin/target/myplugin</pluginDirs> -->
                                </systemProperties>
                                <dependencies>
				                    <!-- Throw in our most common jdbc connectors; add yours here if it's missing -->
                                    <dependency>
                                        <groupId>mysql</groupId>
                                        <artifactId>mysql-connector-java</artifactId>
                                        <type>jar</type>
                                    </dependency>
                                    <dependency>
                                        <groupId>postgresql</groupId>
                                        <artifactId>postgresql</artifactId>
                                    </dependency>
                                </dependencies>
                            </container>
                            <configuration>
                                <home>target/tomcat6x</home>
                                <properties>
                                    <!-- Replace cargo.jvmargs with this one if JRebel is installed -->
									<!-- <cargo.jvmargs>-noverify -javaagent:${rebel.path} -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n -Xms1024m -Xmx2048m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</cargo.jvmargs> -->
                                    <cargo.jvmargs>-noverify -Xdebug -Xnoagent -Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n -Xms1024m -Xmx2048m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC</cargo.jvmargs>
                                    <cargo.logging>low</cargo.logging>
                                </properties>
                                <deployables>
                                    <deployable>
                                        <location>target/${customer.name}-${customer.version}-jive-${jive.version}</location>
                                        <pingURL>http://localhost:8080/jive</pingURL>
                                        <properties>
                                            <context></context>
                                        </properties>
                                    </deployable>
                                </deployables>
                            </configuration>
                        </configuration>
                    </plugin>
                    <!-- <plugin>
                        <groupId>org.zeroturnaround</groupId>
                        <artifactId>javarebel-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>generate-rebel-xml</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <classpath>
                                <fallback>default</fallback>
                                <resources>
                                    <resource>
                                        <directory>${basedir}/../myplugin/target/classes</directory>
                                    </resource>
                                    <resource>
                                         <jarset>${basedir}/../myplugin/target/dependency</jarset>
                                    </resource>
                                </resources>
                            </classpath>
                            <war>
                                <path>${basedir}/target/${customer.name}-${customer.version}-jive-${jive.version}</path>
                            </war>
                        </configuration>
                    </plugin> -->
              </plugins>
            </build>
        </profile>
    </profiles>
    <!-- Generate reports with mvn site -->
    <reporting>
        <outputDirectory>target/site</outputDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>2.2</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>2.7</version>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>surefire-report-maven-plugin</artifactId>
                <version>2.0-beta-1</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-pmd-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <targetJdk>1.6</targetJdk>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.4</version>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>taglist-maven-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <tags>TODO,@todo,FIXME,HACK,XXX,@deprecated</tags>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
</project>
